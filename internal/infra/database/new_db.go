package database

import (
	"log"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

// DB √© a inst√¢ncia global do GORM
var DB *gorm.DB

// NewDB inicializa a conex√£o com o banco SQLite usando GORM
func NewDB() (*gorm.DB, error) {
	// Configura√ß√£o do GORM
	config := &gorm.Config{
		Logger: logger.Default.LogMode(logger.Info), // Log das queries
	}

	// Conecta ao banco SQLite
	db, err := gorm.Open(sqlite.Open("emailn.db"), config)
	if err != nil {
		return nil, err
	}

	// Configura√ß√µes do pool de conex√µes
	sqlDB, err := db.DB()
	if err != nil {
		return nil, err
	}

	// Configura√ß√µes otimizadas para SQLite
	sqlDB.SetMaxOpenConns(1)  // SQLite funciona melhor com 1 conex√£o
	sqlDB.SetMaxIdleConns(1)  // Mant√©m 1 conex√£o idle

	log.Println("‚úÖ Conectado ao SQLite com GORM com sucesso!")

	// Atribui √† vari√°vel global
	DB = db

	return db, nil
}

// CloseDB fecha a conex√£o com o banco
func CloseDB() error {
	if DB != nil {
		sqlDB, err := DB.DB()
		if err != nil {
			return err
		}
		log.Println("üîí Fechando conex√£o com o banco...")
		return sqlDB.Close()
	}
	return nil
}

// GetDB retorna a inst√¢ncia do GORM
func GetDB() *gorm.DB {
	return DB
}

// HealthCheck verifica se o banco est√° funcionando
func HealthCheck() error {
	if DB == nil {
		return gorm.ErrInvalidDB
	}
	
	sqlDB, err := DB.DB()
	if err != nil {
		return err
	}
	
	return sqlDB.Ping()
}
