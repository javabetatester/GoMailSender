package database

import (
	"fmt"
	"log"
	"os"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

// DB √© a inst√¢ncia global do GORM
var DB *gorm.DB

// NewDB inicializa a conex√£o com o banco PostgreSQL usando GORM
func NewDB() (*gorm.DB, error) {
	// Configura√ß√£o do GORM
	config := &gorm.Config{
		Logger: logger.Default.LogMode(logger.Info), // Log das queries
	}

	// String de conex√£o PostgreSQL
	dsn := getDSN()

	// Conecta ao banco PostgreSQL
	db, err := gorm.Open(postgres.Open(dsn), config)
	if err != nil {
		return nil, fmt.Errorf("erro ao conectar com PostgreSQL: %w", err)
	}

	// Configura√ß√µes do pool de conex√µes
	sqlDB, err := db.DB()
	if err != nil {
		return nil, err
	}

	// Configura√ß√µes otimizadas para PostgreSQL
	sqlDB.SetMaxOpenConns(25)    // M√°ximo de conex√µes abertas
	sqlDB.SetMaxIdleConns(10)    // M√°ximo de conex√µes idle
	sqlDB.SetConnMaxLifetime(0)  // Conex√µes n√£o expiram

	log.Println("‚úÖ Conectado ao PostgreSQL com GORM com sucesso!")

	// Atribui √† vari√°vel global
	DB = db

	return db, nil
}

// getDSN retorna a string de conex√£o do PostgreSQL
func getDSN() string {
	host := getEnv("DB_HOST", "localhost")
	port := getEnv("DB_PORT", "5432")
	user := getEnv("DB_USER", "postgres")
	password := getEnv("DB_PASSWORD", "postgres")
	dbname := getEnv("DB_NAME", "emailn")
	sslmode := getEnv("DB_SSLMODE", "disable")

	return fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=%s",
		host, port, user, password, dbname, sslmode)
}

// getEnv retorna o valor da vari√°vel de ambiente ou um valor padr√£o
func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

// CloseDB fecha a conex√£o com o banco
func CloseDB() error {
	if DB != nil {
		sqlDB, err := DB.DB()
		if err != nil {
			return err
		}
		log.Println("üîí Fechando conex√£o com o banco...")
		return sqlDB.Close()
	}
	return nil
}

// GetDB retorna a inst√¢ncia do GORM
func GetDB() *gorm.DB {
	return DB
}

// HealthCheck verifica se o banco est√° funcionando
func HealthCheck() error {
	if DB == nil {
		return gorm.ErrInvalidDB
	}
	
	sqlDB, err := DB.DB()
	if err != nil {
		return err
	}
	
	return sqlDB.Ping()
}
